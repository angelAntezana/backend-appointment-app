- VARIABLES DE ENTORNO
    Si las variables de entorno no son importadas
    correctamente ejecutar el siguiente comando dentro de la
    carpeta del proyecto (demo):
        export $(cat .env | xargs)


- BBDD MYSQL LOCAL
    Para entrar en la bbdd mysql del contenedor seguir los siguientes pasos:
    -Abre una terminal y ejecuta el siguiente comando:
    docker exec -it db-appointment-app bash

    -Una vez dentro ejecuta el siguiente comando( se te pedirá la contraseña usuarioprueba):
    mysql -u usuarioprueba -p

    - Usa la bbdd creada:
    USE u243013116_prueba;

    -Para salir tanto de la consola de MYSQL y del contenedor ejecuta el siguiente comando:
    exit


- MANUAL DE USO
    - Primero habrá que registrar a un usuario y asignar los roles.
    - Devolverá un accessToken y un refreshToken.
    - Con la cabecera AUTHORIZATION poner Bearer accessToken.
    - Crear la persona(Employee, Customer)
    - 


- SWAGGER(OPEN-API)
    - Escribir la siguiente dirección en un ventana del navegador:
        http://localhost:8080/swagger-ui/index.html 
    - Para probar los endpoints hace falta crear un usuario. Copia el 
    accessToken que devuelve cuando creas el usuario. A la derecha donde pone 
    "Authorize", haz click y en el input "Value" pega el accessToken. Por último
    haz click en Authorize



- SONARQUBE
    SonarQube is static analysis tool, which checks you code and signalises
    if somethings is wrong with it.

    Pasos:
    - Abrir una ventana con la dirección http://localhost:9000/
    - Log in con las siguiente credenciales
        - Login: admin
        - Password: admin
    - Después de meter las credenciales se pedirá cambiar la Password.
      Establecer password a usuarioprueba.
    - Crear un proyecto:
        - Dar click en Create a local project.
        - En Project display name poner Backend Appointment App
        - En Project key poner Backend-Appointment-App
        - En main branch name poner main
    - Después seleccionar Locally
    - Generar Token:

        - Para propósito de test pondremos No expiration.
        - Le daremos a Generate.
        - Se nos generará un token. Este token deberemos guardarlo en un sitio
            porque se nos pedirá a la hora de ejecutar SonarQube. Guardar en un
            archivo .env.
    - Build system:
        - Seleccionar Maven
        - Copiar los comandos que nos da SonarQube:

            mvn clean verify sonar:sonar \
            -Dsonar.projectKey=Backend-Appoinment-App \
            -Dsonar.host.url=http://sonarqube:9000 \
            -Dsonar.login=$MY_SONARQUBE_TOKEN
    - Por último esperar que todo haya salido bien y analizar los resultados.
        

- ESTRUCTURA DEL TOKEN
    {
    "roles": "USER,ADMIN,EMPLOYEE",
    "username": "angelElVergas7",
    "sub": "7pruebaAngel@gmail.com",
    "iat": 1733083410,
    "exp": 1733688210
    }
